<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Coin</title>
</head>
<style>
    .filter {
        align-content: center;
    }
</style>

<body>
    <h1>Coin Analyzer</h1>
    <div class="filter">

        <form>
            <label for="start">Start date:</label>

            <input type="date" id="start" name="startDate" min="2018-01-01" max="2018-12-31">

            <label for="End">End date:</label>

            <input type="date" id="end" name="endDate" min="2018-01-01" max="2018-12-31">
            <button type="submit" onclick="getHistory()">Get data</button>
        </form>
    </div>
    <div class="container" style="align-content: center;">
        <canvas role="img" width="700" height="500" id="myChart">

        </canvas>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>

    <script type="text/javascript">
        // console.log("hello from client script", "color: #007acc;");
        const timeStart = [];
        const timeEnd = [];
        const date = [];

        async function main() {
            const res = await fetch("api/current");
            const jsonData = await res.json();
            return jsonData;
        }

        function getHistory() {
            date = [];
            const start = document.getElementsByName("startDate");
            date.push(start);
            const end = document.getElementsByName("endDate");
            date.push(end)
        }

        //get arrays
        async function getData() {
            const data = await main();
            console.log(data);
            data.forEach(row => {
                timeStart.push(row.price_open)
                timeEnd.push(row.price_close)

                date.push(row.time_period_start);
                date.push(row.time_period_end);

            });

        }

        getData();


        var canvas = document.getElementById("myChart");
        var ctx = canvas.getContext('2d');

        // Global Options:
        Chart.defaults.global.defaultFontColor = 'black';
        Chart.defaults.global.defaultFontSize = 16;

        var data = {
            labels: date,
            datasets: [{
                    label: "Price Open",
                    fill: false,
                    lineTension: 0.1,
                    backgroundColor: "rgba(167,105,0,0.4)",
                    borderColor: "rgb(167, 105, 0)",
                    borderCapStyle: 'butt',
                    borderDash: [],
                    borderDashOffset: 0.0,
                    borderJoinStyle: 'miter',
                    pointBorderColor: "white",
                    pointBackgroundColor: "black",
                    pointBorderWidth: 1,
                    pointHoverRadius: 8,
                    pointHoverBackgroundColor: "brown",
                    pointHoverBorderColor: "yellow",
                    pointHoverBorderWidth: 2,
                    pointRadius: 4,
                    pointHitRadius: 10,
                    // notice the gap in the data and the spanGaps: false
                    data: timeEnd,
                    spanGaps: false,
                }, {
                    label: "Price Close",
                    fill: false,
                    lineTension: 0.1,
                    backgroundColor: "rgba(225,0,0,0.4)",
                    borderColor: "red", // The main line color
                    borderCapStyle: 'square',
                    borderDash: [], // try [5, 15] for instance
                    borderDashOffset: 0.0,
                    borderJoinStyle: 'miter',
                    pointBorderColor: "black",
                    pointBackgroundColor: "white",
                    pointBorderWidth: 1,
                    pointHoverRadius: 8,
                    pointHoverBackgroundColor: "yellow",
                    pointHoverBorderColor: "brown",
                    pointHoverBorderWidth: 2,
                    pointRadius: 4,
                    pointHitRadius: 10,
                    // notice the gap in the data and the spanGaps: true
                    data: timeStart,
                    spanGaps: true,
                }

            ]
        };

        // Notice the scaleLabel at the same level as Ticks
        var options = {
            scales: {
                xAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: 'Date',
                        fontSize: 20
                    }
                }],
                yAxes: [{
                    ticks: {
                        beginAtZero: false
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Price cap',
                        fontSize: 20
                    }
                }]
            }
        };

        // Chart declaration:
        var myBarChart = new Chart(ctx, {
            type: 'line',
            data: data,
            options: options
        });
    </script>

</body>

</html>